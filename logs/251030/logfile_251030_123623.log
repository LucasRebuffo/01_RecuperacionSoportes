2025-10-30 15:11:25.333561 - rocketbot - INFO - request: 026_cerrarAplicativoSiesa : line 1.1 - rpascripts : module  id: 463fc65d-ddd9-d149-6362-096afd65e3b8 -  - {"module_name":"Windows","module":"stopService","title":"Sistema uno","var_":"prueba"}
2025-10-30 15:27:48.849131 - rocketbot - INFO - request: 026_cerrarAplicativoSiesa : line 1.2 - rpascripts : execscriptpython  id: a5a79225-1f54-d55b-8fae-8cce0fca7610 -  - # stop_parent_by_child.py\n# Requiere: pip install psutil\n\nimport psutil\nimport time\n\ndef stop_parent_if_child_exists(child_name="Sistema Uno", terminate_timeout=5):\n    """\n    Busca procesos cuyo nombre o cmdline contengan `child_name`.\n    Si encuentra alguno, obtiene su proceso padre y termina todo el árbol del padre.\n    Si no encuentra el hijo, lanza RuntimeError.\n    """\n    try:\n        matches = []\n        # Buscar procesos que parezcan el hijo\n        for p in psutil.process_iter(['pid', 'name', 'cmdline']):\n            try:\n                info_name = (p.info.get('name') or '')\n                info_cmd = ' '.join(p.info.get('cmdline') or [])\n                full = f"{info_name} {info_cmd}".strip()\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n\n            if child_name.lower() in full.lower():\n                matches.append(p)\n\n        if not matches:\n            # Informar mediante raise si no se encuentra abierto\n            raise RuntimeError(f"No se encontró proceso hijo con nombre '{child_name}'.")\n\n        # Para cada hijo encontrado, procesar su padre\n        processed_parents = set()\n        for child in matches:\n            try:\n                parent = child.parent()\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n\n            if parent is None:\n                # Hijo sin padre (raro), saltar\n                continue\n\n            if parent.pid in (0, 1):\n                # Evitar matar procesos críticos del sistema\n                raise RuntimeError(f"Proceso padre con PID crítico ({parent.pid}) detectado. Operación abortada por seguridad.")\n\n            if parent.pid in processed_parents:\n                continue  # ya lo manejamos\n\n            processed_parents.add(parent.pid)\n\n            # Recolectar padre + descendientes (todo el árbol)\n            to_kill = [parent] + parent.children(recursive=True)\n\n            # Intentar terminar de forma amable\n            for proc in to_kill:\n                try:\n                    proc.terminate()\n                except (psutil.NoSuchProcess, psutil.AccessDenied) as e:\n                    # si no existe ya o no hay permisos, seguir con los demás\n                    print(f"Advertencia: no se pudo terminar PID {getattr(proc, 'pid', '?')}: {e}")\n\n            # Esperar un poco para que terminen\n            gone, alive = psutil.wait_procs(to_kill, timeout=terminate_timeout)\n\n            # Si queda alguno vivo, forzar kill\n            if alive:\n                for p in alive:\n                    try:\n                        p.kill()\n                    except (psutil.NoSuchProcess, psutil.AccessDenied) as e:\n                        print(f"Advertencia: no se pudo forzar kill PID {getattr(p, 'pid', '?')}: {e}")\n                # esperar un poco más\n                psutil.wait_procs(alive, timeout=3)\n\n        # Si todo fue bien, devolver True\n        return True\n\n    except Exception:\n        # Re-lanzar la excepción para que el llamador se entere (según tu requerimiento)\n        raise\n\n\nif __name__ == "__main__":\n    try:\n        stop_parent_if_child_exists("Sistema Uno")\n        print("Operación finalizada: si existía el proceso hijo, se cerró el padre y su árbol.")\n    except RuntimeError as re:\n        # Excepciones esperadas (por ejemplo, hijo no encontrado)\n        raise\n    except Exception as e:\n        # Otras excepciones (permiso, NoSuchProcess, etc.) se re-lanzan\n        raise
2025-10-30 15:27:48.881104 - script - ERROR - EXCEPTION IN (<string> script, L_144 ""): RuntimeError: No se encontró proceso hijo con nombre 'Sistema Uno'.
2025-10-30 15:49:58.948813 - rocketbot - INFO - request: 026_cerrarAplicativoSiesa : line 1.2 - rpascripts : execscriptpython  id: a5a79225-1f54-d55b-8fae-8cce0fca7610 -  - import psutil\n\ndef cerrar_proceso_por_hijo(nombre_hijo="Sistema Uno"):\n    try:\n        hijo_encontrado = None\n\n        # Buscar el proceso hijo\n        for proceso in psutil.process_iter(['pid', 'name']):\n            if nombre_hijo.lower() in (proceso.info['name'] or "").lower():\n                hijo_encontrado = proceso\n                break\n\n        # Si no se encontró el proceso hijo\n        if not hijo_encontrado:\n            raise RuntimeError(f"No se encontró el proceso hijo '{nombre_hijo}'.")\n\n        # Obtener el proceso padre\n        padre = hijo_encontrado.parent()\n        if not padre:\n            raise RuntimeError(f"El proceso '{nombre_hijo}' no tiene un proceso padre.")\n\n        # Mostrar información\n        print(f"Proceso hijo encontrado: {hijo_encontrado.name()} (PID: {hijo_encontrado.pid})")\n        print(f"Proceso padre: {padre.name()} (PID: {padre.pid})")\n\n        # Terminar el proceso padre y todos sus hijos\n        for proc in padre.children(recursive=True):\n            try:\n                proc.terminate()\n            except Exception:\n                pass\n        padre.terminate()\n\n        # Esperar un momento para que se cierre\n        gone, alive = psutil.wait_procs([padre], timeout=5)\n        if alive:\n            for p in alive:\n                p.kill()\n\n        print("El proceso padre y sus hijos fueron cerrados correctamente.")\n\n    except Exception as e:\n        # Cualquier error se reporta mediante raise\n        raise RuntimeError(f"Ocurrió un error al cerrar el proceso: {e}")\n\n\nif __name__ == "__main__":\n    cerrar_proceso_por_hijo("Sistema Uno")
2025-10-30 15:49:58.957927 - script - ERROR - EXCEPTION IN (<string> script, L_144 ""): RuntimeError: Ocurrió un error al cerrar el proceso: No se encontró el proceso hijo 'Sistema Uno'.
2025-10-30 15:51:35.502503 - rocketbot - INFO - request: 026_cerrarAplicativoSiesa : line 1.3 - rpascripts : execscriptpython  id: 00bc5498-4071-a640-6bf2-b47ac931a509 -  - import psutil\n\nprint("Procesos detectados que podrían coincidir:")\nfor p in psutil.process_iter(['pid', 'name', 'cmdline']):\n    try:\n        name = p.info['name'] or ''\n        cmd = ' '.join(p.info['cmdline'] or [])\n        if "sistema" in name.lower() or "sistema" in cmd.lower():\n            print(f"PID: {p.pid} | Nombre: {name} | CMD: {cmd}")\n    except (psutil.NoSuchProcess, psutil.AccessDenied):\n        continue
2025-10-30 15:52:57.177807 - rocketbot - INFO - request: 026_cerrarAplicativoSiesa : line 1.2 - rpascripts : execscriptpython  id: a5a79225-1f54-d55b-8fae-8cce0fca7610 -  - import psutil\n\ndef cerrar_sistema_uno():\n    try:\n        hijo_encontrado = None\n\n        # Buscar proceso cuyo cmdline contenga SISTEMAUNO-CLOUD\n        for proceso in psutil.process_iter(['pid', 'name', 'cmdline']):\n            try:\n                cmd = ' '.join(proceso.info.get('cmdline') or [])\n                if 'sistemauno-cloud' in cmd.lower():\n                    hijo_encontrado = proceso\n                    break\n            except (psutil.NoSuchProcess, psutil.AccessDenied):\n                continue\n\n        if not hijo_encontrado:\n            raise RuntimeError("No se encontró el proceso hijo 'Sistema Uno' (SISTEMAUNO-CLOUD).")\n\n        # Obtener el proceso padre\n        padre = hijo_encontrado.parent()\n        if not padre:\n            raise RuntimeError("El proceso hijo no tiene un proceso padre asociado.")\n\n        print(f"Hijo encontrado: {hijo_encontrado.name()} (PID: {hijo_encontrado.pid})")\n        print(f"Padre: {padre.name()} (PID: {padre.pid})")\n\n        # Terminar el padre y todos sus hijos\n        for proc in padre.children(recursive=True):\n            try:\n                proc.terminate()\n            except Exception:\n                pass\n\n        padre.terminate()\n\n        gone, alive = psutil.wait_procs([padre], timeout=5)\n        if alive:\n            for p in alive:\n                try:\n                    p.kill()\n                except Exception:\n                    pass\n\n        print("El proceso 'Sistema Uno' y su padre fueron cerrados correctamente.")\n\n    except Exception as e:\n        raise RuntimeError(f"Ocurrió un error al intentar cerrar 'Sistema Uno': {e}")\n\n\nif __name__ == "__main__":\n    cerrar_sistema_uno()
